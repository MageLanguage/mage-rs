// Test basic variable assignment
zero : [0];
one : [0d1];

// Test variable referencing
ref_zero : [zero];
ref_one : [one];

// Test chained variable references
chain1 : [ref_one];
chain2 : [chain1];

// Test all math operations
add_test : [0d5 + 0d3];
sub_test : [0d10 - 0d4];
mul_test : [0d6 * 0d7];
div_test : [0d20 / 0d4];
mod_test : [0d17 % 0d5];

// Test operations with variables
var_add : [add_test + sub_test];
var_sub : [mul_test - div_test];
var_mul : [div_test * mod_test];
var_div : [mul_test / sub_test];
var_mod : [add_test % sub_test];

// Test complex nested expressions
deep_nest : [[[0d2 + 0d3] * [0d4 - 0d1]] / [0d5 + 0d10]];
mixed_vars : [[var_add - var_sub] + [var_mul / var_div]];

// Test edge mathematical cases
large_num : [0xFF];
hex_test : [0xA + 0xB];
bin_test : [0b1010 + 0b0101];
oct_test : [0o17 + 0o3];

// Test multiple operations in sequence
sequence : [0d1 + 0d2 - 0d3 + 0d4 * 0d5 / 0d6];

// Test zero in operations
zero_add : [zero + 0d5];
zero_mul : [zero * 0d100];
add_zero : [0d42 + zero];
mul_zero : [0d42 * zero];

// Test self-referential (this should work since we evaluate right side first)
incremental : [0d10];
incremental2 : [incremental + 0d5];
incremental3 : [incremental2 * 0d2];
